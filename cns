//server side

import java.io.*;
import java.net.*;

public class FileServer {
    public static void main(String[] args) {
        int port = 5000; 
        String filePath = "attendance.docx";  // File to be sent

        try (ServerSocket serverSocket = new ServerSocket(port)) { // Start server on port 5000
            System.out.println("Server is running and waiting for a connection...");

            Socket clientSocket = serverSocket.accept();  // Accept client connection
            System.out.println("Client connected: " + clientSocket.getInetAddress());

            File file = new File(filePath);
            if (!file.exists()) {  // Check if file exists
                System.out.println("Error: File not found!");
                clientSocket.close();
                return;
            }

            // Open file input stream to read the file
            try (FileInputStream fileInputStream = new FileInputStream(file);
                 BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);
                 OutputStream outputStream = clientSocket.getOutputStream()) {

                byte[] buffer = new byte[8192];  // Buffer to store file data
                int bytesRead;

                System.out.println("Sending file...");
                while ((bytesRead = bufferedInputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead);  // Send file data
                }
                outputStream.flush(); 
                System.out.println("File sent successfully.");
            }

            clientSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

//client side

import java.io.*;
import java.net.*;

public class FileClient {
    public static void main(String[] args) {
        String serverAddress = "127.0.0.1";  // Connect to localhost
        int port = 5000; 
        String saveFilePath = "received_file.docx"; // Save received file

        try (Socket socket = new Socket(serverAddress, port);
             InputStream inputStream = socket.getInputStream();
             FileOutputStream fileOutputStream = new FileOutputStream(saveFilePath);
             BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(fileOutputStream)) {

            byte[] buffer = new byte[8192]; 
            int bytesRead;

            System.out.println("Connected to Server! Receiving file...");
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                bufferedOutputStream.write(buffer, 0, bytesRead);  // Write received data to file
            }
            bufferedOutputStream.flush(); 
            System.out.println("File received and saved to: " + saveFilePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


//How to run
javac FileServer.java FileClient.java
java FileServer  # Run this first (Server)
java FileClient  # Run this next (Client)

//HMAC
#include <stdio.h>
#include <string.h>
#include <openssl/hmac.h>

// Function to print hash in hexadecimal format
void print_hex(unsigned char *data, int len) {
    for (int i = 0; i < len; i++) {
        printf("%02x", data[i]); // Print byte in hex
    }
    printf("\n");
}

int main() {
    const char *key = "secretkey";  // Secret key for HMAC
    const char *message = "Hello, HMAC!";  // Message to hash
    unsigned char hmac_result[EVP_MAX_MD_SIZE];  // Buffer for result
    unsigned int len;

    // Compute HMAC using SHA-256
    HMAC(EVP_sha256(), key, strlen(key), (unsigned char*)message, strlen(message), hmac_result, &len);

    // Print the computed HMAC
    printf("HMAC (SHA-256) of the message: ");
    print_hex(hmac_result, len);

    return 0;
}


//8.2

import java.io.IOException;

import java.net.InetSocketAddress;

import java.nio.ByteBuffer;

import java.nio.channels.*;

import java.util.Iterator;

import java.util.Set;



public class TCPConcurrentPollServer {

    private static final int PORT = 12345;

    private static final int BUFFER_SIZE = 1024;



    public static void main(String[] args) {

        try {

            // Create a non-blocking server socket channel

            ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();

            serverSocketChannel.bind(new InetSocketAddress(PORT));

            serverSocketChannel.configureBlocking(false); // Non-blocking mode



            // Create a selector to handle multiple clients

            Selector selector = Selector.open();

            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);



            System.out.println("TCP Concurrent Server using poll() is running on port " + PORT);



            while (true) {

                // Poll for events

                selector.select(); // Blocks until an event occurs



                Set<SelectionKey> selectedKeys = selector.selectedKeys();

                Iterator<SelectionKey> iterator = selectedKeys.iterator();



                while (iterator.hasNext()) {

                    SelectionKey key = iterator.next();

                    iterator.remove(); // Remove key to avoid processing it again



                    if (key.isAcceptable()) {

                        // Accept new client connection

                        ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();

                        SocketChannel clientChannel = serverChannel.accept();

                        clientChannel.configureBlocking(false);

                        clientChannel.register(selector, SelectionKey.OP_READ);

                        System.out.println("New client connected: " + clientChannel.getRemoteAddress());

                    } else if (key.isReadable()) {

                        // Read data from a client

                        SocketChannel clientChannel = (SocketChannel) key.channel();

                        ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE);

                        int bytesRead = clientChannel.read(buffer);



                        if (bytesRead == -1) {

                            clientChannel.close();

                            System.out.println("Client disconnected");

                        } else {

                            buffer.flip();

                            String message = new String(buffer.array(), 0, bytesRead);

                            System.out.println("Received: " + message);

                            

                            // Echo the message back to the client

                            buffer.rewind();

                            clientChannel.write(buffer);

                        }

                    }

                }

            }

        } catch (IOException e) {

            e.printStackTrace();

        }

    }

}

//8.2

import java.io.IOException;

import java.nio.ByteBuffer;

import java.nio.channels.*;

import java.net.*;

import java.util.*;



public class TCPConcurrentServerUpper {

    public static void main(String[] args) throws IOException {

        Selector selector = Selector.open();

        ServerSocketChannel server = ServerSocketChannel.open();

        server.bind(new InetSocketAddress(5000));

        server.configureBlocking(false);

        server.register(selector, SelectionKey.OP_ACCEPT);

	System.out.println("Server running....");

        while (true) {

            selector.select();

            for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {

                SelectionKey key = it.next(); it.remove();

                if (key.isAcceptable()) {

                    SocketChannel client = server.accept();

                    client.configureBlocking(false);

                    client.register(selector, SelectionKey.OP_READ);

                } else if (key.isReadable()) {

                    SocketChannel client = (SocketChannel) key.channel();

                    ByteBuffer buffer = ByteBuffer.allocate(1024);

                    if (client.read(buffer) == -1) { client.close(); continue; }

                    buffer.flip();

                    client.write(ByteBuffer.wrap(new String(buffer.array(), 0, buffer.limit()).toUpperCase().getBytes()));

                }

            }

        }

    }

}

//6

#include <iostream>
#include <vector>
#include <cstring>
#include <iomanip>

using namespace std;
using uint64 = uint64_t;

// Constants for SHA-512
const uint64 K[80] = {
    0x428A2F98D728AE22, 0x7137449123EF65CD, 0xB5C0FBCFEC4D3B2F, 0xE9B5DBA58189DBBC,
    0x3956C25BF348B538, 0x59F111F1B605D019, 0x923F82A4AF194F9B, 0xAB1C5ED5DA6D8118,
    0xD807AA98A3030242, 0x12835B0145706FBE, 0x243185BE4EE4B28C, 0x550C7DC3D5FFB4E2,
    0x72BE5D74F27B896F, 0x80DEB1FE3B1696B1, 0x9BDC06A725C71235, 0xC19BF174CF692694,
    0xE49B69C19EF14AD2, 0xEFBE4786384F25E3, 0x0FC19DC68B8CD5B5, 0x240CA1CC77AC9C65,
    0x2DE92C6F592B0275, 0x4A7484AA6EA6E483, 0x5CB0A9DCBD41FBD4, 0x76F988DA831153B5,
    0x983E5152EE66DFAB, 0xA831C66D2DB43210, 0xB00327C898FB213F, 0xBF597FC7BEEF0EE4,
    0xC6E00BF33DA88FC2, 0xD5A79147930AA725, 0x06CA6351E003826F, 0x142929670A0E6E70,
    0x27B70A8546D22FFC, 0x2E1B21385C26C926, 0x4D2C6DFC5AC42AED, 0x53380D139D95B3DF,
    0x650A73548BAF63DE, 0x766A0ABB3C77B2A8, 0x81C2C92E47EDAEE6, 0x92722C851482353B,
    0xA2BFE8A14CF10364, 0xA81A664BBC423001, 0xC24B8B70D0F89791, 0xC76C51A30654BE30,
    0xD192E819D6EF5218, 0xD69906245565A910, 0xF40E35855771202A, 0x106AA07032BBD1B8,
    0x19A4C116B8D2D0C8, 0x1E376C085141AB53, 0x2748774CDF8EEB99, 0x34B0BCB5E19B48A8,
    0x391C0CB3C5C95A63, 0x4ED8AA4AE3418ACB, 0x5B9CCA4F7763E373, 0x682E6FF3D6B2B8A3,
    0x748F82EE5DEFB2FC, 0x78A5636F43172F60, 0x84C87814A1F0AB72, 0x8CC702081A6439EC,
    0x90BEFFFA23631E28, 0xA4506CEBDE82BDE9, 0xBEF9A3F7B2C67915, 0xC67178F2E372532B
};

// Rotate Right (ROR)
#define ROTR(x, n) ((x >> n) | (x << (64 - n)))

// SHA-512 Functions
#define Ch(x, y, z) ((x & y) ^ (~x & z))
#define Maj(x, y, z) ((x & y) ^ (x & z) ^ (y & z))
#define Sigma0(x) (ROTR(x, 28) ^ ROTR(x, 34) ^ ROTR(x, 39))
#define Sigma1(x) (ROTR(x, 14) ^ ROTR(x, 18) ^ ROTR(x, 41))
#define sigma0(x) (ROTR(x, 1) ^ ROTR(x, 8) ^ (x >> 7))
#define sigma1(x) (ROTR(x, 19) ^ ROTR(x, 61) ^ (x >> 6))

// SHA-512 Hashing Function
vector<uint64> SHA512(const string &message) {
    // Initial hash values
    uint64 H[8] = {
        0x6A09E667F3BCC908, 0xBB67AE8584CAA73B,
        0x3C6EF372FE94F82B, 0xA54FF53A5F1D36F1,
        0x510E527FADE682D1, 0x9B05688C2B3E6C1F,
        0x1F83D9ABFB41BD6B, 0x5BE0CD19137E2179
    };

    // Padding the message
    vector<uint8_t> paddedMsg(message.begin(), message.end());
    paddedMsg.push_back(0x80);
    while ((paddedMsg.size() + 16) % 128 != 0) paddedMsg.push_back(0);
    
    uint64 bitLength = message.size() * 8;
    for (int i = 0; i < 8; ++i) 
        paddedMsg.push_back((bitLength >> (56 - i * 8)) & 0xFF);

    // Process each 1024-bit block
    for (size_t i = 0; i < paddedMsg.size(); i += 128) {
        uint64 W[80] = {};
        for (int j = 0; j < 16; ++j) {
            W[j] = 0;
            for (int k = 0; k < 8; ++k) 
                W[j] = (W[j] << 8) | paddedMsg[i + j * 8 + k];
        }

        for (int j = 16; j < 80; ++j)
            W[j] = sigma1(W[j - 2]) + W[j - 7] + sigma0(W[j - 15]) + W[j - 16];

        uint64 a, b, c, d, e, f, g, h;
        a = H[0]; b = H[1]; c = H[2]; d = H[3];
        e = H[4]; f = H[5]; g = H[6]; h = H[7];

        for (int j = 0; j < 80; ++j) {
            uint64 T1 = h + Sigma1(e) + Ch(e, f, g) + K[j] + W[j];
            uint64 T2 = Sigma0(a) + Maj(a, b, c);
            h = g; g = f; f = e; e = d + T1;
            d = c; c = b; b = a; a = T1 + T2;
        }

        H[0] += a; H[1] += b; H[2] += c; H[3] += d;
        H[4] += e; H[5] += f; H[6] += g; H[7] += h;
    }

    return vector<uint64>(H, H + 8);
}

int main() {
    string msg = "Hello, World!";
    vector<uint64> hash = SHA512(msg);

    cout << "SHA-512 Hash: ";
    for (uint64 h : hash)
        cout << hex << setw(16) << setfill('0') << h;
    cout << endl;
}
